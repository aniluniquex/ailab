WEEK-1
 AIM: Implement Breadth First Search
 What is BFS:
 The breadth-first search (BFS) algorithm is used to search a tree or graph data structure for a node that
 meets a set of criteria. It starts at the treeâ€™s root or graph and searches/visits all nodes at the current
 depth level before moving on to the nodes at the next depth level. Breadth-first search can be used to
 solve many problems in graph theory.
 Example BFS Algorithm
 Howdoes BFS work?
 Starting from the root, all the nodes at a particular level are visited first and then the nodes of
 the next level are traversed till all the nodes are visited.
 To do this a queue is used. All the adjacent unvisited nodes of the current level are pushed into
 the queue and the nodes of the current level are marked visited and popped from the queue.
 Illustration:
 Let us understand the working of the algorithm with the help of the following example.
 Step1: Initially queue and visited arrays are empty.


Program:
graph = {
 '5' : ['3','7'],
 '3' : ['2', '4'],
 '7' : ['8'],
 '2' : [],
 '4' : ['8'],
 '8' : []
 }
 visited = [] # List for visited nodes.
 queue = [] #Initialize a queue
 def bfs(visited, graph, node): #function for BFS
 visited.append(node)
 queue.append(node)
 while queue:
 # Creating loop to visit each node
 m=queue.pop(0)
 print (m, end = " ")
 for neighbour in graph[m]:
 if neighbour not in visited:
 visited.append(neighbour)
 queue.append(neighbour)
 # Driver Code
 print("Following is the Breadth-First Search")
 bfs(visited, graph, '5')
 Output:
 Following is the Breadth-First Search
 5 3 7 2 4 8