WEEK-7
 AIM: Implement Tower of Hanoi using Python
 What is Towers of Hanoi:
 Tower of Hanoi is a mathematical puzzle where we have three rods (A, B, and C) and N disks.
 Initially, all the disks are stacked in decreasing value of diameter i.e., the smallest disk is placed on the
 top and they are on rod A. The objective of the puzzle is to move the entire stack to another rod (here
 considered C), obeying the following simple rules:
 1. Only one disk can be moved at a time.
 2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another
 stack i.e. a disk can only be moved if it is the uppermost disk on a stack.
 3. No disk may be placed on top of a smaller disk.
 Tower of Hanoi using Recursion:
 The idea is to use the helper node to reach the destination using recursion. Below is the pattern for
 this problem:
 Shift ‘N-1’ disks from ‘A’ to ‘B’, using C.
 Shift last disk from ‘A’ to ‘C’.
 Shift ‘N-1’ disks from ‘B’ to ‘C’, using A.
Program:
 def TowerOfHanoi(n , start, aux, end):
 if n==1:
 print ("Move disk 1 from source",start,"to destination",end)
 return
 TowerOfHanoi(n-1, start, end, aux)
 print ("Move disk",n,"from source",start,"to destination",end)
 TowerOfHanoi(n-1, aux, start, end)
 # Driver code
 n =3
 TowerOfHanoi(n,'A','B','C')
 Output:
 Move disk 1 from source A to destination C
 Move disk 2 from source A to destination B
 Move disk 1 from source C to destination B
 Move disk 3 from source A to destination C
 Move disk 1 from source B to destination A
 Move disk 2 from source B to destination C
 Move disk 1 from source A to destination C
 === Code Execution Successful ===